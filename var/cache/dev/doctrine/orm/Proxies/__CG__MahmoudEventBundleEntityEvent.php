<?php

namespace Proxies\__CG__\Mahmoud\EventBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Event extends \Mahmoud\EventBundle\Entity\Event implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'Mahmoud\\EventBundle\\Entity\\Event' . "\0" . 'id', '' . "\0" . 'Mahmoud\\EventBundle\\Entity\\Event' . "\0" . 'eventTitle', '' . "\0" . 'Mahmoud\\EventBundle\\Entity\\Event' . "\0" . 'eventPicture', '' . "\0" . 'Mahmoud\\EventBundle\\Entity\\Event' . "\0" . 'rawPhoto', '' . "\0" . 'Mahmoud\\EventBundle\\Entity\\Event' . "\0" . 'eventDescription', '' . "\0" . 'Mahmoud\\EventBundle\\Entity\\Event' . "\0" . 'eventNBRPlace', '' . "\0" . 'Mahmoud\\EventBundle\\Entity\\Event' . "\0" . 'eventAdress', '' . "\0" . 'Mahmoud\\EventBundle\\Entity\\Event' . "\0" . 'eventCountry', '' . "\0" . 'Mahmoud\\EventBundle\\Entity\\Event' . "\0" . 'eventHoure', '' . "\0" . 'Mahmoud\\EventBundle\\Entity\\Event' . "\0" . 'eventStartDate', '' . "\0" . 'Mahmoud\\EventBundle\\Entity\\Event' . "\0" . 'eventEndDate', '' . "\0" . 'Mahmoud\\EventBundle\\Entity\\Event' . "\0" . 'userId', '' . "\0" . 'Mahmoud\\EventBundle\\Entity\\Event' . "\0" . 'eventCategory'];
        }

        return ['__isInitialized__', '' . "\0" . 'Mahmoud\\EventBundle\\Entity\\Event' . "\0" . 'id', '' . "\0" . 'Mahmoud\\EventBundle\\Entity\\Event' . "\0" . 'eventTitle', '' . "\0" . 'Mahmoud\\EventBundle\\Entity\\Event' . "\0" . 'eventPicture', '' . "\0" . 'Mahmoud\\EventBundle\\Entity\\Event' . "\0" . 'rawPhoto', '' . "\0" . 'Mahmoud\\EventBundle\\Entity\\Event' . "\0" . 'eventDescription', '' . "\0" . 'Mahmoud\\EventBundle\\Entity\\Event' . "\0" . 'eventNBRPlace', '' . "\0" . 'Mahmoud\\EventBundle\\Entity\\Event' . "\0" . 'eventAdress', '' . "\0" . 'Mahmoud\\EventBundle\\Entity\\Event' . "\0" . 'eventCountry', '' . "\0" . 'Mahmoud\\EventBundle\\Entity\\Event' . "\0" . 'eventHoure', '' . "\0" . 'Mahmoud\\EventBundle\\Entity\\Event' . "\0" . 'eventStartDate', '' . "\0" . 'Mahmoud\\EventBundle\\Entity\\Event' . "\0" . 'eventEndDate', '' . "\0" . 'Mahmoud\\EventBundle\\Entity\\Event' . "\0" . 'userId', '' . "\0" . 'Mahmoud\\EventBundle\\Entity\\Event' . "\0" . 'eventCategory'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Event $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function displayPhoto()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'displayPhoto', []);

        return parent::displayPhoto();
    }

    /**
     * {@inheritDoc}
     */
    public function getEventNBRPlace()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEventNBRPlace', []);

        return parent::getEventNBRPlace();
    }

    /**
     * {@inheritDoc}
     */
    public function setEventNBRPlace($eventNBRPlace)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEventNBRPlace', [$eventNBRPlace]);

        return parent::setEventNBRPlace($eventNBRPlace);
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setEventTitle($eventTitle)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEventTitle', [$eventTitle]);

        return parent::setEventTitle($eventTitle);
    }

    /**
     * {@inheritDoc}
     */
    public function getEventTitle()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEventTitle', []);

        return parent::getEventTitle();
    }

    /**
     * {@inheritDoc}
     */
    public function setEventPicture($eventPicture)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEventPicture', [$eventPicture]);

        return parent::setEventPicture($eventPicture);
    }

    /**
     * {@inheritDoc}
     */
    public function getEventPicture()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEventPicture', []);

        return parent::getEventPicture();
    }

    /**
     * {@inheritDoc}
     */
    public function setEventDescription($eventDescription)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEventDescription', [$eventDescription]);

        return parent::setEventDescription($eventDescription);
    }

    /**
     * {@inheritDoc}
     */
    public function getEventDescription()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEventDescription', []);

        return parent::getEventDescription();
    }

    /**
     * {@inheritDoc}
     */
    public function setEventAdress($eventAdress)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEventAdress', [$eventAdress]);

        return parent::setEventAdress($eventAdress);
    }

    /**
     * {@inheritDoc}
     */
    public function getEventAdress()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEventAdress', []);

        return parent::getEventAdress();
    }

    /**
     * {@inheritDoc}
     */
    public function setEventCountry($eventCountry)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEventCountry', [$eventCountry]);

        return parent::setEventCountry($eventCountry);
    }

    /**
     * {@inheritDoc}
     */
    public function getEventCountry()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEventCountry', []);

        return parent::getEventCountry();
    }

    /**
     * {@inheritDoc}
     */
    public function setEventHoure($eventHoure)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEventHoure', [$eventHoure]);

        return parent::setEventHoure($eventHoure);
    }

    /**
     * {@inheritDoc}
     */
    public function getEventHoure()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEventHoure', []);

        return parent::getEventHoure();
    }

    /**
     * {@inheritDoc}
     */
    public function setEventStartDate($eventStartDate)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEventStartDate', [$eventStartDate]);

        return parent::setEventStartDate($eventStartDate);
    }

    /**
     * {@inheritDoc}
     */
    public function getEventStartDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEventStartDate', []);

        return parent::getEventStartDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setEventEndDate($eventEndDate)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEventEndDate', [$eventEndDate]);

        return parent::setEventEndDate($eventEndDate);
    }

    /**
     * {@inheritDoc}
     */
    public function getEventEndDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEventEndDate', []);

        return parent::getEventEndDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setEventCategory($eventCategory)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEventCategory', [$eventCategory]);

        return parent::setEventCategory($eventCategory);
    }

    /**
     * {@inheritDoc}
     */
    public function getEventCategory()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEventCategory', []);

        return parent::getEventCategory();
    }

    /**
     * {@inheritDoc}
     */
    public function getUserId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUserId', []);

        return parent::getUserId();
    }

    /**
     * {@inheritDoc}
     */
    public function setUserId($userId)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUserId', [$userId]);

        return parent::setUserId($userId);
    }

}
